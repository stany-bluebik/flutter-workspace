"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getCommonHttpHeaders = exports.getHttpProxyAgent = exports.getPackageLatestNpmVersion = void 0;
const child_process_1 = require("child_process");
const hpagent_1 = require("hpagent");
function getPackageLatestNpmVersion(pkg) {
    try {
        return ((0, child_process_1.execSync)(`npm show ${pkg} version`, {
            stdio: 'ignore',
        })
            .toString()
            .trim() || 'latest');
    }
    catch (e) {
        return 'latest';
    }
}
exports.getPackageLatestNpmVersion = getPackageLatestNpmVersion;
function getHttpProxyAgent(targetUrl, proxyUrl) {
    var _a;
    const { http_proxy: httpProxy, https_proxy: httpsProxy, HTTP_PROXY, HTTPS_PROXY, } = process.env;
    const proxy = (_a = (proxyUrl ||
        httpsProxy ||
        HTTPS_PROXY ||
        httpProxy ||
        HTTP_PROXY)) === null || _a === void 0 ? void 0 : _a.trim();
    if (!proxy) {
        return undefined;
    }
    console.log(`The proxy server at '${proxy}' will be used.`);
    const proxyAgentOpts = {
        keepAlive: true,
        keepAliveMsecs: 1000,
        maxSockets: 256,
        maxFreeSockets: 256,
        //scheduling: 'lifo',
        proxy: proxy,
    };
    if (targetUrl === null || targetUrl === void 0 ? void 0 : targetUrl.startsWith('https')) {
        return new hpagent_1.HttpsProxyAgent(proxyAgentOpts);
    }
    else if (targetUrl === null || targetUrl === void 0 ? void 0 : targetUrl.startsWith('http')) {
        return new hpagent_1.HttpProxyAgent(proxyAgentOpts);
    }
    else {
        return undefined;
    }
}
exports.getHttpProxyAgent = getHttpProxyAgent;
function getCommonHttpHeaders(pkgName, targetUrl, proxyUrl) {
    const pkgVersion = getPackageLatestNpmVersion(pkgName);
    const userAgent = `${pkgName.replace('/', '_')}/${pkgVersion}`;
    const proxyAgent = getHttpProxyAgent(targetUrl, proxyUrl);
    return Object.assign({ headers: {
            'User-Agent': userAgent,
        } }, (proxyAgent ? { agent: proxyAgent } : {}));
}
exports.getCommonHttpHeaders = getCommonHttpHeaders;
//# sourceMappingURL=utils.js.map