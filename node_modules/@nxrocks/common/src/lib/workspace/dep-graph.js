"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getProjectGraph = exports.addDependenciesForProject = exports.getPackageInfosForNxProjects = void 0;
const devkit_1 = require("@nx/devkit");
function getPackageInfosForNxProjects(pluginName, projectFilter, getPackageInfo, workspace) {
    const workspacePackageInfo = {
        projects: {},
        packages: {},
    };
    Object.entries(workspace.projects)
        .filter(([, project]) => projectFilter(project))
        .forEach(([projectName, project]) => {
        try {
            const pkgInfo = getPackageInfo(project);
            workspacePackageInfo.projects[projectName] = pkgInfo;
            workspacePackageInfo.packages[pkgInfo.packageId] = projectName;
        }
        catch (e) {
            if (process.env['NX_VERBOSE_LOGGING'] === 'true') {
                devkit_1.logger.warn(`[${pluginName}]: Failed to get package info for project '${projectName}'`);
                devkit_1.logger.warn(e);
            }
        }
    });
    return workspacePackageInfo;
}
exports.getPackageInfosForNxProjects = getPackageInfosForNxProjects;
function addDependenciesForProject(pluginName, rootProjectFolder, rootProjectName, rootPkgInfo, builder, workspace) {
    var _a, _b;
    if (process.env['NX_VERBOSE_LOGGING'] === 'true') {
        devkit_1.logger.debug(`[${pluginName}]: Adding dependencies for project '${rootProjectName}'...`);
    }
    (_a = rootPkgInfo.dependencies) === null || _a === void 0 ? void 0 : _a.forEach((depPkgInfo) => {
        const depProjectName = workspace.packages[depPkgInfo.packageId];
        if (depProjectName) {
            builder.addStaticDependency(rootProjectName, depProjectName, (0, devkit_1.joinPathFragments)(rootProjectFolder, rootPkgInfo.packageFile));
        }
    });
    (_b = rootPkgInfo.modules) === null || _b === void 0 ? void 0 : _b.forEach((childModuleName) => {
        builder.addStaticDependency(rootProjectName, childModuleName, (0, devkit_1.joinPathFragments)(rootProjectFolder, rootPkgInfo.packageFile));
    });
}
exports.addDependenciesForProject = addDependenciesForProject;
function getProjectGraph(pluginName, projectFilter, getPackageInfo, graph, context) {
    const builder = new devkit_1.ProjectGraphBuilder(graph);
    if (process.env['NX_VERBOSE_LOGGING'] === 'true') {
        devkit_1.logger.debug(`[${pluginName}]: Looking related projects inside the workspace...`);
    }
    const workspace = getPackageInfosForNxProjects(pluginName, projectFilter, getPackageInfo, context.projectsConfigurations);
    Object.entries(workspace.projects).forEach(([projectName, pkgInfo]) => {
        addDependenciesForProject(pluginName, graph.nodes[projectName].data.root, projectName, pkgInfo, builder, workspace);
    });
    return builder.getUpdatedProjectGraph();
}
exports.getProjectGraph = getProjectGraph;
//# sourceMappingURL=dep-graph.js.map