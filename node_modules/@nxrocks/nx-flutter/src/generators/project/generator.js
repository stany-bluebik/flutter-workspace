"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.projectGenerator = void 0;
const tslib_1 = require("tslib");
const devkit_1 = require("@nx/devkit");
const common_1 = require("@nxrocks/common");
const lib_1 = require("./lib");
const index_1 = require("../../index");
function projectGenerator(tree, options) {
    var _a, _b;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const normalizedOptions = (0, lib_1.normalizeOptions)(tree, options);
        yield (0, lib_1.promptAdditionalOptions)(tree, normalizedOptions);
        const targets = {};
        const commands = [
            { key: 'analyze', value: 'analyze' },
            { key: 'clean', value: 'clean' },
            { key: 'format', value: `format ${(0, devkit_1.joinPathFragments)(normalizedOptions.projectRoot, '*')}` },
            { key: 'test', value: 'test' },
            { key: 'test', value: 'test' },
            { key: 'doctor', value: 'doctor' },
        ];
        if (normalizedOptions.template === 'app') {
            commands.push({ key: 'assemble', value: 'assemble' }, { key: 'attach', value: 'attach' }, { key: 'drive', value: 'drive' }, { key: 'gen-l10n', value: 'gen-l10n' }, { key: 'install', value: 'install' }, { key: 'run', value: 'run' });
        }
        if (((_a = normalizedOptions.platforms) === null || _a === void 0 ? void 0 : _a.indexOf('android')) != -1) {
            commands.push({ key: 'build-aar', value: 'build aar' }, { key: 'build-apk', value: 'build apk' }, { key: 'build-appbundle', value: 'build appbundle' }, { key: 'build-bundle', value: 'build bundle' });
        }
        if (((_b = normalizedOptions.platforms) === null || _b === void 0 ? void 0 : _b.indexOf('ios')) != -1) {
            commands.push({ key: 'build-ios', value: 'build ios' }, { key: 'build-ios-framework', value: 'build ios-framework' }, { key: 'build-ipa', value: 'build ipa' });
        }
        for (const command of commands) {
            targets[command.key] = Object.assign({ executor: `nx:run-commands`, options: {
                    command: `${normalizedOptions.useFvm === true ? 'fvm ' : ''}${command.key === 'format' ? 'dart' : 'flutter'} ${command.value}`,
                    cwd: normalizedOptions.projectRoot,
                } }, (command.key.startsWith('build-')
                ? {
                    outputs: [(0, devkit_1.joinPathFragments)('{workspaceRoot}', normalizedOptions.projectRoot, 'build')],
                }
                : {}));
        }
        (0, devkit_1.addProjectConfiguration)(tree, normalizedOptions.projectName, {
            root: normalizedOptions.projectRoot,
            sourceRoot: (0, devkit_1.joinPathFragments)(normalizedOptions.projectRoot, 'src'),
            projectType: normalizedOptions.template === 'app' ? 'application' : 'library',
            targets: targets,
            tags: normalizedOptions.parsedTags,
        });
        yield (0, lib_1.generateFlutterProject)(tree, normalizedOptions);
        (0, common_1.addPluginToNxJson)(index_1.NX_FLUTTER_PKG, tree);
    });
}
exports.projectGenerator = projectGenerator;
exports.default = projectGenerator;
//# sourceMappingURL=generator.js.map