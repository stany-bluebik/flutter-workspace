"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateFlutterProject = void 0;
const tslib_1 = require("tslib");
const devkit_1 = require("@nx/devkit");
const child_process_1 = require("child_process");
const flutter_utils_1 = require("../../../utils/flutter-utils");
function generateFlutterProject(tree, options) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const opts = (0, flutter_utils_1.buildFlutterCreateOptions)(options);
        devkit_1.logger.info(`Generating Flutter project with following options : ${opts}...`);
        if (!(0, flutter_utils_1.isFlutterInstalled)(options.useFvm)) {
            throw new Error(options.useFvm
                ? "'fvm' was not found on your system's PATH.\nPlease make sure you have installed it correctly.\nüëâüèæ https://fvm.app/docs/getting_started/installation"
                : "'flutter' was not found on your system's PATH.\nPlease make sure you have installed it correctly.\nüëâüèæ https://flutter.dev/docs/get-started/install");
        }
        if (process.env.NX_DRY_RUN === 'true') {
            devkit_1.logger.info('Skipping Flutter project generation because of --dry-run flag');
            return;
        }
        // Create the command to execute
        const execute = `${options.useFvm == true ? 'fvm ' : ''}flutter create ${opts} ${options.projectRoot}`;
        try {
            devkit_1.logger.info(`Executing command: ${execute}`);
            (0, child_process_1.execSync)(execute, { stdio: [0, 1, 2] });
            return;
        }
        catch (e) {
            devkit_1.logger.error(`Failed to execute command: ${execute}`);
            devkit_1.logger.error(e);
            return;
        }
    });
}
exports.generateFlutterProject = generateFlutterProject;
//# sourceMappingURL=generate-project.js.map