"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.promptAdditionalOptions = void 0;
const tslib_1 = require("tslib");
const enquirer_1 = require("enquirer");
function promptAdditionalOptions(tree, options) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        if (process.env.NX_INTERACTIVE === 'true' && ['app', 'plugin'].includes(options.template)) {
            yield (0, enquirer_1.prompt)([
                {
                    name: 'platforms',
                    type: 'multiselect',
                    choices: [
                        {
                            name: "android",
                            value: "Android platform",
                        },
                        {
                            name: "ios",
                            value: "iOS platform",
                        },
                        {
                            name: "linux",
                            value: "Linux platform",
                        },
                        {
                            name: "windows",
                            value: "Windows platform",
                        },
                        {
                            name: "macos",
                            value: "MacOS platform",
                        },
                        {
                            name: "web",
                            value: "Web platform",
                        }
                    ],
                    validate: (platforms) => {
                        return (platforms === null || platforms === void 0 ? void 0 : platforms.length) ? true : 'You must select at least one platform';
                    },
                    message: 'Which platforms would you like to use?'
                }
            ]).then((result) => tslib_1.__awaiter(this, void 0, void 0, function* () {
                const languages = yield (0, enquirer_1.prompt)([
                    {
                        skip: () => { var _a; return ((_a = result.platforms) === null || _a === void 0 ? void 0 : _a.indexOf('android')) === -1; },
                        name: 'androidLanguage',
                        type: 'select',
                        initial: 1,
                        choices: [
                            {
                                name: "java",
                                value: "Java"
                            },
                            {
                                name: "kotlin",
                                value: "Kotlin"
                            }
                        ],
                        message: "Which Android language would you like to use?",
                    },
                    {
                        skip: () => { var _a; return ((_a = result.platforms) === null || _a === void 0 ? void 0 : _a.indexOf('ios')) === -1; },
                        name: 'iosLanguage',
                        type: 'select',
                        initial: 1,
                        choices: [
                            {
                                name: "objc",
                                value: "Objective-C"
                            },
                            {
                                name: "swift",
                                value: "Swift"
                            }
                        ],
                        message: "Which iOS language would you like to use?",
                    }
                ]);
                options.platforms = result === null || result === void 0 ? void 0 : result.platforms;
                options.androidLanguage = languages === null || languages === void 0 ? void 0 : languages.androidLanguage;
                options.iosLanguage = languages === null || languages === void 0 ? void 0 : languages.iosLanguage;
            }));
        }
    });
}
exports.promptAdditionalOptions = promptAdditionalOptions;
//# sourceMappingURL=prompt-additional-options.js.map